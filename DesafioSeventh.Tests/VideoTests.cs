namespace DesafioSeventh.Tests
{
	using DesafioSeventh.Domain;
	using DesafioSeventh.Domain.Global;
	using DesafioSeventh.Domain.Model;
	using DesafioSeventh.Domain.Providers;
	using DesafioSeventh.Domain.ViewModel;
	using DesafioSeventh.Service;

	public class VideoTests
	{
		IServerDomain _serverDomain = Substitute.For<IServerDomain>();
		IVideoDomain _videoDomain;
		IVideoRepository _videoRepository = Substitute.For<IVideoRepository>();
		IVideoFileProvider _videoProfile = Substitute.For<IVideoFileProvider>();

		Stream streamValid = new MemoryStream(Convert.FromBase64String(""));


		[SetUp]
		public void Setup()
		{
			_videoDomain = new VideoService(_videoRepository, _videoProfile, _serverDomain);

			_videoProfile.AcceptedExtensions.Returns(new string[1] { "mp4" });
		}

		[Test]
		public void FileSizeZero()
		{
			var serverId = Guid.NewGuid();
			var streamZero = new MemoryStream(Convert.FromBase64String(""));

			_serverDomain.Get(Arg.Any<Guid>()).Returns(new Server { Id = serverId });

			Assert.Catch<InvalidVideoFileException>(() =>
			{
				_videoDomain.Create(serverId, new VideoViewModel
				{
					Description = "FileZero"
				}, streamZero, "mp4");
			});
		}

		[Test]
		public void InvalidExtension()
		{
			var serverId = Guid.NewGuid();

			_serverDomain.Get(Arg.Any<Guid>()).Returns(new Server { Id = serverId });

			Assert.Catch<InvalidVideoFileException>(() =>
			{
				_videoDomain.Create(serverId, new VideoViewModel
				{
					Description = "FileZero"
				}, streamValid, "pdf");
			});
		}
		[Test]
		public void CreateSuccess()
		{
			var serverId = Guid.NewGuid();
			var createRepo = false;
			_serverDomain.Get(Arg.Any<Guid>()).Returns(new Server { Id = serverId });
			_videoRepository.Create(Arg.Any<Video>(), Arg.Any<Action<Guid, Guid>>()).Returns((a) =>
			{
				createRepo = true;
				Video vids = (Video)a[0];
				Assert.That(vids.ServerId, Is.EqualTo(serverId));
				Assert.That(vids.SizeInBytes, Is.EqualTo(streamValid.Length));
				return vids;
			});

			var vid = _videoDomain.Create(serverId, new VideoViewModel
			{
				Description = "FileZero"
			}, streamValid, "mp4");

			Assert.That(createRepo, Is.True);
		}
	}
}